{"version":3,"sources":["hn/api.ts","components/Item.tsx","components/NewsList.tsx","components/ItemPage.tsx","components/Header.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["apiEndpoint","concat","cache","HNAPI","Object","classCallCheck","this","createClass","key","value","apiRequest","_getItem","asyncToGenerator","regenerator_default","a","mark","_callee","id","res","wrap","_context","prev","next","abrupt","Promise","resolve","sent","stop","_x","apply","arguments","_callee2","request","_context2","fetch","then","json","Item","item","props","react_default","createElement","Link","to","title","Component","NewsList","_this","possibleConstructorReturn","getPrototypeOf","call","state","stories","_this2","getTopStories","slice","all","map","getItem","setState","_this3","index","components_Item","ItemPage","query","queryString","parse","location","search","parseInt","kids","kid","comments","objectSpread","comment","text","Header","width","backgroundColor","margin","style","getStyle","getLinkStyle","App","BrowserRouter","components_Header","Switch","Route","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4408ece8.chunk.js","sourcesContent":["import { IItem } from \"./interfaces\";\r\n\r\nexport const apiUrl = \"https://hacker-news.firebaseio.com\";\r\nexport const apiVersion = \"v0\";\r\nexport const apiEndpoint = `${apiUrl}/${apiVersion}`;\r\n\r\nconst cache: { [id: number]: IItem } = {};\r\n\r\nexport class HNAPI {\r\n\tstatic getTopStories(): Promise<number[]> {\r\n\t\treturn apiRequest(\"topstories\");\r\n\t}\r\n\r\n\tstatic getNewStories(): Promise<number[]> {\r\n\t\treturn apiRequest(\"newstories\");\r\n\t}\r\n\r\n\tstatic getBestStories(): Promise<number[]> {\r\n\t\treturn apiRequest(\"beststories\");\r\n\t}\r\n\r\n\tstatic async getItem(id: number): Promise<IItem> {\r\n\t\tif (cache[id]) {\r\n\t\t\treturn Promise.resolve(cache[id]);\r\n\t\t}\r\n\r\n\t\tconst res = await apiRequest(`item/${id}`);\r\n\t\tcache[id] = res;\r\n\t\treturn res;\r\n\t}\r\n\r\n\tstatic getMaxItem(): Promise<number> {\r\n\t\treturn apiRequest(\"maxitem\");\r\n\t}\r\n}\r\n\r\nasync function apiRequest(request: string): Promise<any> {\r\n\treturn fetch(`${apiEndpoint}/${request}.json`).then(res => res.json());\r\n}","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { IItem } from '../hn/interfaces';\r\n\r\nclass Item extends Component<{ item: IItem }, any> {\r\n\trender() {\r\n\t\tconst item = this.props.item;\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<Link to={`/item?id=${item.id}`}>{item.title}</Link>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Item;\r\n","import React, { Component } from 'react';\r\nimport { HNAPI } from '../hn/api';\r\nimport Item from './Item';\r\nimport { IItem } from '../hn/interfaces';\r\n\r\ninterface IState {\r\n\tstories: IItem[];\r\n}\r\n\r\nclass NewsList extends Component<any, IState> {\r\n\r\n\tconstructor(props: any) {\r\n\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tstories: []\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tHNAPI.getTopStories().then(json => {\r\n\t\t\tjson = json.slice(0, 30);\r\n\t\t\tPromise.all(json.map(id => HNAPI.getItem(id))).then(res => {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tstories: res\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst renderStories = () => {\r\n\t\t\treturn this.state.stories.map((item, index) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Item key={index} item={item} />\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{renderStories()}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default NewsList;\r\n","import React, { Component } from 'react';\r\nimport queryString from \"query-string\";\r\nimport { HNAPI } from '../hn/api';\r\nimport { IItem } from '../hn/interfaces';\r\n\r\nclass ItemPage extends Component<any, IItem> {\r\n\r\n\tcomponentWillMount() {\r\n\t\tconst query = queryString.parse(this.props.location.search)\r\n\t\tif (!query.id || !(typeof query.id == \"string\")) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tHNAPI.getItem(parseInt(query.id)).then(item => {\r\n\t\t\tconst kids = item.kids.map(kid => HNAPI.getItem(kid));\r\n\r\n\t\t\tPromise.all(kids).then(comments => {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\t...item,\r\n\t\t\t\t\tcomments\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst renderComments = (comments: IItem[]) => comments.map((comment, index) => (\r\n\t\t\t<div key={index}>\r\n\t\t\t\t{comment.text}\r\n\t\t\t</div>\r\n\t\t));\r\n\r\n\t\tif (!this.state) {\r\n\t\t\treturn (\r\n\t\t\t\t<div>loading...</div>\r\n\t\t\t)\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t{this.state.title}\r\n\t\t\t\t{renderComments(this.state.comments)}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default ItemPage;\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Header extends Component {\r\n    getStyle(): React.CSSProperties {\r\n        return {\r\n            width: \"100%\",\r\n            backgroundColor: \"#ff6600\"\r\n        }\r\n    }\r\n\r\n    getLinkStyle(): React.CSSProperties {\r\n        return {\r\n            margin: \"5px 10px\"\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={this.getStyle()}>\r\n                <Link style={this.getLinkStyle()} to=\"/\">YAHN</Link>\r\n                <Link style={this.getLinkStyle()} to=\"/new\">new</Link>\r\n                <Link style={this.getLinkStyle()} to=\"/comments\">comments</Link>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\nimport NewsList from './NewsList';\r\n\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport ItemPage from './ItemPage';\r\nimport Header from './Header';\r\n\r\nclass App extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Router>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Header />\r\n\t\t\t\t\t<Switch>\r\n\t\t\t\t\t\t<Route exact path=\"/\" component={NewsList} />\r\n\t\t\t\t\t\t<Route path=\"/item\" component={ItemPage} />\r\n\t\t\t\t\t\t<Route path=\"/user\" component={ItemPage} />\r\n\t\t\t\t\t</Switch>\r\n\t\t\t\t</div>\r\n\t\t\t</Router>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}